Valgrind
	- manual is helpful, but Valgrind is so user friendly I have been 
	  successful using it without even looking at the --help usage message.
	  Try running $valgrind your-program, at the end of the output it will
	  give suggestions for command line options to try, and they are usually
	  explained or self-explanatory. 
	- Valgrind should work with programs written in any language
	- there are GUIs available, but I have only ever used the command line

	- helps for debugging!
	- great for checking for memory leaks
	- will also tell you other problems, like testing an uninitialized value
		- I had this issue and may not have found it without Valgrind
	- it will also tell you if you overran a buffer
		- example here http://valgrind.org/docs/manual/quick-start.html
	- it will automatically demangle C++ names and give you line numbers
	  for detected issues
		- I have had good luck with line numbers, but if they are
		  incorrect, consider recompiling (-g flag, also reduce compiler optimisations)
	- your program will run 10-50x slower because it simulates the CPU
	- threading is fully supported, but valgrind will serialize execution
	- there is support for MPI, check http://valgrind.org/docs/manual/mc-manual.html

Helpful options
	--track-origins=yes
		- track origins of uninitialized values. Does not do this by default.
	--leak-check=yes 
		- turn on detailed leak detector
		- by default uses Memcheck
		- I like to run it first without --leak-check=yes (less verbose)
		- --leak-check can be {no, summary, yes, full}, default is summary
	- it is also possible to track open file descriptors (--track-fds=yes),
	  follow exec* (child processes --trace-children=yes), and suppress
	  output from a forked process if you like (--child-silent-after-fork=yes)
	- run valgrind --help for more information
	- valgrind will suppress outputting errors if the same one occurs, so if
	  you want to see how many times an error occured, run with -v

How to run
	- you don't need to recompile to use valgrind, just give it a binary
	$ valgrind [valgrind-options] your-prog [your-prog-options]
		- be careful to put program options in the correct place
	- usually I juse memcheck, which is the default tool
		- you can specify the tool with --tool=[option]
		-
	- you can set default options in ~/.valgrindrc
	- you can run GDB through valgrind
		- take a look at http://valgrind.org/docs/manual/manual-core-adv.html
		- I have not had to do this

Error messages I've run into
	- "Invalid read of size x"
		- illegal read from invalid stack address or invalid heap block
	- "Conditional jump or move depends on uninitialised value(s)"
		- you tested against an uninitialized value
Others
	- "Invalid free()"
		- illegal free, maybe you freed the same block twice
	- "Mismatched free() / delete / delete []"
		- you mixed "new" with "free" or "malloc" with "delete." This is wrong.
		- the difference: "new" and "delete" call constructor and destructor,
		  respectively. It will probably work on Linux, but it won't be portable.
	- "Source and destination overlap in memcpy(0xbffff294, 0xbffff280, 21)"
		- memory overlap, perhaps when copy from src to dst (src and dst point
		  to some same memory between them). This behavior is undefined

Known issues:
	- "My program uses the C++ STL and string classes. Valgrind reports 
	  'still reachable' memory leaks involving these classes at the exit of 
	  the program, but there should be none."
		- probably an implementation of C++ std lib is causing this because
		  it uses its own memory pool allocator. Don't worry about this.
	- Valgrind crashes
		- it's possible bad code you are testing overwrote valgrind's 
		  memory manager
		- your program could have jumped to a non-code address, or
		  valgrind doesn't handle that CPU instruction. If this is
		  the case, file a bug report.
	- Valgrind doesn't find array overruns
		- Valgrind doesn't do bounds checking
----------------above: memcheck-------------------------------------------------

Other tools:
	- these are useful for speeding up your program, for instance you can
	  find out easily if there are lots of cache misses

Cachegrind:
	- "a cache and branch-prediction profiler"
	- unlike valgrind, compiler optimisation should be on, compile with -g flag
		- this is optional but recommended
	$ valgrind --tool=cachegrind [your prog]
		- it will tell you cache misses and more
		- I have never used cachegrind
		- see http://valgrind.org/docs/manual/cg-manual.html

Callgrind:
	- "a call-graph generating cache and branch prediction profiler"
	$ valgrind --tool=callgrind [cg options] your-prog 
	- more info here http://valgrind.org/docs/manual/cl-manual.html

Helgrind:
	- "a thread error detector"
	$ valgrind --tool=helgrind
	- it is for detecting synchronisation errors in C, C++, and fortran
	  for programs using POSIX pthreads
		- lock/unlock problems, race conditions, etc
	- see http://valgrind.org/docs/manual/hg-manual.html

DRD:
	- "a thread error detector"
	- for detecting errors in multithreaded C/C++ programs, for POSIX threads
	- http://valgrind.org/docs/manual/drd-manual.html

Massif:
	- "a heap profiler"
	- measures how much heap memory your program uses
	- can also measure the stack, but does not do this by default
	$ valgrind --tool=massif
	- it will follow forks too

DHAT:
	- "a dynaic heap analysis tool"
	- tracks allocated blocks and inspects each memory access to find which
	  block, if any, it is to
	$ valgrind --tool=exp-dhat
	- http://valgrind.org/docs/manual/dh-manual.html

SGCheck:
	- "an experimental stack ang global array overrun detector"
	$ valgrind --tool=exp-sgcheck
	- uses heuristics to find overruns of stack and global arrays
	- http://valgrind.org/docs/manual/sg-manual.html

BBV:
	- "an experimental basic block vector generation tool"
	$ valgrind --tool=exp-bbv
	- generates a list of all basic blocks entered during program execution
	  and coutn how many times each basic block was run

Lackey:
	- "an example tool"
	$ valgrind --tool=lackey
	- does different program measurements, like the number of calls to a function
	  or the number of conditional branches encountered

Nulgrind:
	- "the minimal Valgrind tool"
	$ valgrind --tool=none
	- it doesn't do anything. It's for Valgrind developers
	$ valgrind --tool=drd
